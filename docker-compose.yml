version: '3.8'

services:
  # API Gateway
  api-gateway:
    image: kong:latest
    container_name: api_gateway
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      - kong-database
    networks:
      - assessment-network

  kong-database:
    image: postgres:13
    container_name: kong_database
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    ports:
      - "5432:5432"
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - assessment-network

  # Backend Services
  auth-service:
    build:
      context: ./backend/auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    restart: always
    volumes:
      - ./backend/auth_service:/app
    environment:
      - NODE_ENV=development
      - MONGO_URI=mongodb://mongo:27017/auth
      - REDIS_URI=redis://redis:6379
    ports:
      - "3001:3001"
    depends_on:
      - mongo
      - redis
    networks:
      - assessment-network

  assessment-service:
    build:
      context: ./backend/assessment_service
      dockerfile: Dockerfile
    container_name: assessment_service
    restart: always
    volumes:
      - ./backend/assessment_service:/app
    environment:
      - NODE_ENV=development
      - POSTGRES_URI=postgres://postgres:postgres@postgres:5432/assessment
      - MONGO_URI=mongodb://mongo:27017/assessment
      - REDIS_URI=redis://redis:6379
    ports:
      - "3002:3002"
    depends_on:
      - postgres
      - mongo
      - redis
    networks:
      - assessment-network

  proctor-service:
    build:
      context: ./backend/proctor_service
      dockerfile: Dockerfile
    container_name: proctor_service
    restart: always
    volumes:
      - ./backend/proctor_service:/app
    environment:
      - NODE_ENV=development
      - MONGO_URI=mongodb://mongo:27017/proctor
      - KAFKA_URI=kafka:9092
    ports:
      - "3003:3003"
    depends_on:
      - mongo
      - kafka
    networks:
      - assessment-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    depends_on:
      - auth-service
      - assessment-service
      - proctor-service
    networks:
      - assessment-network

  # Databases
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: assessment
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - assessment-network

  mongo:
    image: mongo:5
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - assessment-network

  # Cache
  redis:
    image: redis:6
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - assessment-network

  # Message Queue
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - assessment-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - assessment-network

networks:
  assessment-network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  kong_data:
